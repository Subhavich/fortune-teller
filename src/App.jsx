import { useState } from "react";
import OpenAI from "openai";
import { TAROT_PROMPT_SYSTEM, TAROT_PROMPT_USER } from "./DATA";

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true,
});

const THAI_MONTHS = [
  "‡∏°.‡∏Ñ.",
  "‡∏Å.‡∏û.",
  "‡∏°‡∏µ.‡∏Ñ.",
  "‡πÄ‡∏°.‡∏¢.",
  "‡∏û.‡∏Ñ.",
  "‡∏°‡∏¥.‡∏¢.",
  "‡∏Å.‡∏Ñ.",
  "‡∏™.‡∏Ñ.",
  "‡∏Å.‡∏¢.",
  "‡∏ï.‡∏Ñ.",
  "‡∏û.‡∏¢.",
  "‡∏ò.‡∏Ñ.",
];

const App = () => {
  const [form, setForm] = useState({
    sex: "",
    date: "",
    month: "",
    year: "",
    jobStatus: "",
    relationshipStatus: "",
  }); // Store form state
  const [response, setResponse] = useState(""); // Store AI response
  const [loading, setLoading] = useState(false); // Loading state

  // Handle input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    console.log({ ...form, [name]: value });
    setForm({ ...form, [name]: value });
  };

  const deriveExtension = () => {
    return `
üåü ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏î‡∏ß‡∏á üåü
‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${form.date} ${THAI_MONTHS[form.month - 1]} ${form.year}
‡πÄ‡∏û‡∏®: ${form.sex}
‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô (${
      form.jobStatus
    }): [Six of Pentacles, The Wheel of Fortune, Four of Pentacles]
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å (${form.relationshipStatus}): [Ace of Cups, Three of Swords, The Lovers]
‡∏≠‡∏≤‡∏ä‡∏µ‡∏û (${form.jobStatus}): [The Emperor, Eight of Pentacles, The Chariot]
‚ú® ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏•‡∏¢‡∏ô‡πâ‡∏≤ ‚ú®
`;
  };

  const handleSubmit = async (e) => {
    console.log(`${TAROT_PROMPT_USER} ${deriveExtension()}`);
    e.preventDefault();
    setLoading(true);

    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4-turbo", // Recommend using gpt-4 for nuanced outputs
        store: true, // Optional: Store the session for later retrieval
        messages: [
          { role: "system", content: TAROT_PROMPT_SYSTEM },
          {
            role: "user",
            content: `${TAROT_PROMPT_USER} ${deriveExtension()}`,
          },
        ],
      });

      setResponse(JSON.parse(response.choices[0].message.content)); // Update the response
    } catch (error) {
      console.error("Error fetching AI response:", error);
      setResponse("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    } finally {
      setLoading(false); // Stop the loading spinner
    }
  };

  return (
    <div className="p-5 font-sans max-w-screen-sm mx-auto">
      <h1 className="text-2xl font-bold mb-5 text-center">‡∏ñ‡∏≤‡∏°‡πÑ‡∏û‡πà‡∏ó‡∏≤‡πÇ‡∏£‡∏ï‡πå</h1>
      <form onSubmit={handleSubmit} className="space-y-5">
        {/* Sex */}
        <label className="block">
          <span className="block font-semibold mb-2">‡πÄ‡∏û‡∏®:</span>
          <select
            name="sex"
            value={form.sex}
            onChange={handleChange}
            className="w-full p-3 border rounded-md"
          >
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®</option>
            <option value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</option>
            <option value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</option>
            <option value="‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏">‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏</option>
          </select>
        </label>

        {/* Date of Birth */}
        <div className="block">
          <span className="block font-semibold mb-2">‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î:</span>
          <div className="flex space-x-2">
            <input
              type="number"
              name="date"
              placeholder="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"
              value={form.date}
              onChange={handleChange}
              className="w-1/3 p-3 border rounded-md"
            />
            <select
              name="month"
              value={form.month}
              onChange={handleChange}
              className="w-1/3 p-3 border rounded-md"
            >
              <option value="">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
              {THAI_MONTHS.map((month, index) => (
                <option key={index} value={index + 1}>
                  {month}
                </option>
              ))}
            </select>
            <input
              type="number"
              name="year"
              placeholder="‡∏õ‡∏µ ‡∏Ñ.‡∏®."
              value={form.year}
              onChange={handleChange}
              className="w-1/3 p-3 border rounded-md"
            />
          </div>
        </div>

        {/* Job Status */}
        <label className="block">
          <span className="block font-semibold mb-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô:</span>
          <select
            name="jobStatus"
            value={form.jobStatus}
            onChange={handleChange}
            className="w-full p-3 border rounded-md"
          >
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô</option>
            <option value="‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥">‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥</option>
            <option value="‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à">‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à</option>
            <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏á‡∏≤‡∏ô">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏á‡∏≤‡∏ô</option>
            <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
            <option value="‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏ô‡∏ã‡πå">‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏ô‡∏ã‡πå</option>
          </select>
        </label>

        {/* Relationship Status */}
        <label className="block">
          <span className="block font-semibold mb-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå:</span>
          <select
            name="relationshipStatus"
            value={form.relationshipStatus}
            onChange={handleChange}
            className="w-full p-3 border rounded-md"
          >
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå</option>
            <option value="‡πÇ‡∏™‡∏î">‡πÇ‡∏™‡∏î</option>
            <option value="‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ñ‡∏∏‡∏¢">‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ñ‡∏∏‡∏¢</option>
            <option value="‡∏°‡∏µ‡πÅ‡∏ü‡∏ô">‡∏°‡∏µ‡πÅ‡∏ü‡∏ô</option>
            <option value="‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß">‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</option>
          </select>
        </label>

        {/* Submit Button */}
        <button
          type="submit"
          className={`w-full p-3 rounded-md text-white ${
            loading
              ? "bg-gray-400 cursor-not-allowed"
              : "bg-indigo-500 hover:bg-indigo-600"
          }`}
          disabled={loading} // Disable the button while loading
        >
          {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢..." : "‡∏ñ‡∏≤‡∏°‡πÑ‡∏û‡πà‡∏ó‡∏≤‡πÇ‡∏£‡∏ï‡πå"}
        </button>
      </form>

      {/* Response */}
      {response && (
        <div className="mt-5 p-5 bg-gray-100 rounded-md shadow-md">
          <h3 className="text-lg font-semibold">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:</h3>
          {response.reading.map((topic) => (
            <div key={topic.topic}>
              <p>
                <b>
                  {topic.topic} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {topic.score}/5
                </b>
              </p>
              <p>
                <b>‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á : </b> {topic.challenges}
              </p>
              <p>
                <b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ : </b> {topic.suggestions}
              </p>
              {topic.cards.map((card) => (
                <>
                  <b>{card.name}</b>
                  <p>{card.meaning}</p>
                </>
              ))}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default App;
